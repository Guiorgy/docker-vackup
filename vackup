#!/bin/bash
# Docker Volume File Backup and Restore Tool
# Easily tar up a volume on a local (or remote) engine
# Inspired by CLIP from Lukasz Lach

set -Eeo pipefail

handle_error() {
  exit_code=$?
  if [ -n "${VACKUP_FAILURE_SCRIPT}" ]; then
    /bin/bash "${VACKUP_FAILURE_SCRIPT}" "$1" $exit_code
  fi
  exit $exit_code
}

trap 'handle_error $LINENO' ERR

usage() {
cat <<EOF

"Docker Volume Backup". Replicates image management commands for volumes.

export/import copies files between a host tarball and a volume. For making
  volume backups and restores.

Usage:

vackup export VOLUME FILE
  Creates a gzip'ed tarball in the current directory from a volume

vackup import FILE VOLUME
  Extracts a gzip'ed tarball into a volume

EOF
}

if [ -z "$1" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
  usage
  exit 0
fi

cmd_export() {
  VOLUME_NAME="$2"
  FILE_NAME="$3"

  if [ -z "$VOLUME_NAME" ]; then
    echo "Error: Not enough arguments"
    usage
    exit 1
  fi

  if [ -z "$FILE_NAME" ]; then
    FILE_NAME="$VOLUME_NAME.tar.gz"
  fi

  if ! docker volume inspect --format '{{.Name}}' "$VOLUME_NAME"; then
    echo "Error: Volume $VOLUME_NAME does not exist"
    exit 1
  fi

# TODO: check if file exists on host, if it does
# create a option for overwrite and check if that's set
# TODO: if FILE_NAME starts with / we need to error out
# unless we can translate full file paths

  if ! docker run --rm \
    -v "$VOLUME_NAME":/vackup-volume \
    -v "$(pwd)":/vackup \
    busybox \
    tar -zcvf /vackup/"$FILE_NAME" -C /vackup-volume .; then
    echo "Error: Failed to start busybox backup container"
    exit 1
  fi

  echo "Successfully tar'ed volume $VOLUME_NAME into file '$FILE_NAME'"
}

cmd_import() {
  FILE_NAME="$2"
  VOLUME_NAME="$3"

  if [ -z "$FILE_NAME" ]; then
    echo "Error: Not enough arguments"
    usage
    exit 1
  fi

  if [ -z "$VOLUME_NAME" ]; then
    VOLUME_NAME="$FILE_NAME"
    FILE_NAME="$VOLUME_NAME.tar.gz"
  fi

  if [ ! -r "$FILE_NAME" ]; then
    echo "Error: Could not find or open '$FILE_NAME'"
    exit 1
  fi

  if ! docker volume inspect --format '{{.Name}}' "$VOLUME_NAME"; then
    echo "Warning: Volume $VOLUME_NAME does not exist"
    docker volume create "$VOLUME_NAME"
  fi

# TODO: check if file exists on host, if it does
# create a option for overwrite and check if that's set
# TODO: if FILE_NAME starts with / we need to error out
# unless we can translate full file paths

  if ! docker run --rm \
    -v "$VOLUME_NAME":/vackup-volume \
    -v "$(pwd)":/vackup \
    busybox \
    tar -xvzf /vackup/"$FILE_NAME" -C /vackup-volume; then
    echo "Error: Failed to start busybox container"
    exit 1
  fi

  echo "Successfully unpacked '$FILE_NAME' into volume $VOLUME_NAME"
}

COMMAND="$1"
case "$COMMAND" in
  export) cmd_export "$@" ;;
  import) cmd_import "$@" ;;
  *) echo "Error: '$COMMAND' is not a recognized command"; usage; exit 1 ;;
esac

exit 0
