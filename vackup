#!/bin/bash
# Docker Volume File Backup and Restore Tool
# Easily tar up a volume on a local (or remote) engine
# Inspired by CLIP from Lukasz Lach

set -Eeo pipefail

handle_error() {
  exit_code=$?
  if [ -n "${VACKUP_FAILURE_SCRIPT}" ]; then
    /bin/bash "${VACKUP_FAILURE_SCRIPT}" "$1" $exit_code
  fi
  exit $exit_code
}

trap 'handle_error $LINENO' ERR

print_usage() {
cat <<EOF

"Docker Volume Backup". Replicates image management commands for volumes.

export/import copies files between a host tarball and a volume. For making
  volume backups and restores.

Usage:

vackup export VOLUME FILE
  Creates a gzip'ed tarball in the current directory from a volume

vackup import FILE VOLUME
  Extracts a gzip'ed tarball into a volume

EOF

  if [ $# -ne 0 ]; then
    exit $1
  fi
}

error() {
  if [ "$1" == 'u' ] || [ "$1" == 'usage' ]; then
    USAGE=1
    MESSAGE=$2
    CODE=$3
  else
    USAGE=0
    MESSAGE=$1
    CODE=$2
  fi

  if [ -z "$MESSAGE" ]; then
    echo 'Error'
  else
    echo "Error: $MESSAGE"
  fi

  if [ $USAGE -eq 1 ]; then
    print_usage
  fi

  if [ -z "$CODE" ]; then
    exit 1
  else
    exit "$CODE"
  fi
}

command_export() {
  case $# in
    1) VOLUME_NAME="$1"; FILE_NAME="$VOLUME_NAME.tar.gz" ;;
    2) VOLUME_NAME="$1"; FILE_NAME="$2" ;;
    *) error usage 'Wrong number of arguments' ;;
  esac

  if ! docker volume inspect --format '{{.Name}}' "$VOLUME_NAME"; then
    error "Volume $VOLUME_NAME does not exist"
  fi

# TODO: check if file exists on host, if it does
# create a option for overwrite and check if that's set
# TODO: if FILE_NAME starts with / we need to error out
# unless we can translate full file paths

  if ! docker run --rm \
    -v "$VOLUME_NAME":/vackup-volume \
    -v "$(pwd)":/vackup \
    busybox \
    tar -zcvf /vackup/"$FILE_NAME" -C /vackup-volume .; then
    error 'Failed to start busybox backup container'
  fi

  echo "Successfully tar'ed volume $VOLUME_NAME into file '$FILE_NAME'"
}

command_import() {
  case $# in
    1) VOLUME_NAME="$1"; FILE_NAME="$VOLUME_NAME.tar.gz" ;;
    2) FILE_NAME="$1"; VOLUME_NAME="$2" ;;
    *) error usage 'Wrong number of arguments' ;;
  esac

  if [ ! -r "$FILE_NAME" ]; then
    error "Could not find or open '$FILE_NAME'"
  fi

  if ! docker volume inspect --format '{{.Name}}' "$VOLUME_NAME"; then
    echo "Warning: Volume $VOLUME_NAME does not exist"
    docker volume create "$VOLUME_NAME"
  fi

# TODO: check if file exists on host, if it does
# create a option for overwrite and check if that's set
# TODO: if FILE_NAME starts with / we need to error out
# unless we can translate full file paths

  if ! docker run --rm \
    -v "$VOLUME_NAME":/vackup-volume \
    -v "$(pwd)":/vackup \
    busybox \
    tar -xvzf /vackup/"$FILE_NAME" -C /vackup-volume; then
    error 'Failed to start busybox container'
  fi

  echo "Successfully unpacked '$FILE_NAME' into volume $VOLUME_NAME"
}

if [ $# -eq 0 ]; then
  print_usage 0
fi

COMMAND="$1"
ARGS="${@:2}"
case "$COMMAND" in
  -h) ;& # fallthrough
  --help) ;& # fallthrough
  help) print_usage 0 ;;
  export) command_export $ARGS ;;
  import) command_import $ARGS ;;
  *) error usage "'$COMMAND' is not a recognized command" ;;
esac

exit 0
